#!/bin/bash
#
# This script is run *once* after the GWMS Singularity detection,
# and can be used to do additional Singularity capability testing
# and advertising.
#

glidein_config="$1"

function info {
    echo "INFO  " $@ 1>&2
}

function my_warn {
    echo "WARN  " $@ 1>&2
    export GLIDEIN_VALIDATION_WARNINGS="$@. $GLIDEIN_VALIDATION_WARNINGS"
}

function advertise {
    # atype is the type of the value as defined by GlideinWMS:
    #   I - integer
    #   S - quoted string
    #   C - unquoted string (i.e. Condor keyword or expression)
    key="$1"
    value="$2"
    atype="$3"

    if [ "$glidein_config" != "NONE" ]; then
        add_config_line_safe $key "$value"
        add_condor_vars_line $key "$atype" "-" "+" "Y" "Y" "+"
    fi

    if [ "$atype" = "S" ]; then
        echo "$key = \"$value\""
    else
        echo "$key = $value"
    fi
}

function get_glidein_config_value {
    # extracts a config attribute value from 
    # $1 is the attribute key
    CF=$glidein_config
    if [ "$glidein_config" = "NONE" ]; then
        CF="$PWD/glidein_config"
    fi
    KEY="$1"
    VALUE=`(cat $CF | grep "^$KEY " | tail -n 1 | sed "s/^$KEY //") 2>/dev/null`
    echo "$VALUE"
}

# TODO Almost identical to the function in osgvo-default-image -- extract into a common file
function check_singularity_sif_support {
    # Return 0 if singularity can directly run a .sif file without having to
    # unpack it into a temporary sandbox first, nonzero otherwise.
    #
    # We know this needs setuid Singularity configured to allow loopback
    # devices but there may be other conditions so just test it directly.

    # Don't try any docker:// URLs -- downloading from those is a separate test
    local stash_alpine="stash:///osgconnect/public/rynge/infrastructure/images/static/library__alpine__latest.sif"
    local http_alpine="http://data.isi.edu/osg/images/alpine.sif"
    local sylabs_alpine="library://alpine:3"
    local has_singularity=$(get_glidein_config_value HAS_SINGULARITY)
    local singularity_path=$(get_glidein_config_value GWMS_SINGULARITY_PATH)
    local testsif="images/gwms-alpine.sif"

    # singularity is a prereq
    if [[ $has_singularity != "True" ]]; then
        return 1
    fi

    # only download once
    if ! $singularity_path inspect "$testsif" &>/dev/null; then
        (
            stash_download "$testsif" "$stash_alpine" &&
                $singularity_path inspect "$testsif" &&
                exit 0

            http_download "$testsif" "$http_alpine" &&
                $singularity_path inspect "$testsif" &&
                exit 0

            $singularity_path pull --force "$testsif" "$sylabs_alpine" &&
                $singularity_path inspect "$testsif" &&
                exit 0

            echo "All sources failed - could not create $testsif"
            exit 1
        ) &> "$testsif.log"; ret=$?
        if [[ $ret != 0 ]]; then
            info "check_singularity_sif_support() failed to download alpine image"
            cat "$testsif.log"
            rm -f "$testsif"
            return $ret
        fi
    fi

    # did the download fail
    if [ ! -s "$testsif" ]; then
        my_warn "$testsif failed to download and was not caught by singularity inspect"
        return 1
    fi

    output=$($singularity_path run "$testsif" /bin/true 2>&1)
    ret=$?

    if [[ $ret != 0 ]]; then
        # DEBUGGING
        info "Error testing for SIF support; output:"
        info "$output"
        return $ret
    elif grep -q "temporary sandbox" <<< "$output"; then
        info "Using a SIF created a temporary sandbox"
        return 1
    else
        return 0
    fi
}

function check_singularity_registry_support {
    # Return 0 if singularity can directly run a registry image without having to
    # unpack it into a temporary sandbox first, nonzero otherwise.
    #
    local osghub_alpine="docker://hub.opensciencegrid.org/library/alpine:3"
    local has_singularity=$(get_glidein_config_value HAS_SINGULARITY)
    local singularity_path=$(get_glidein_config_value GWMS_SINGULARITY_PATH)

    # singularity is a prereq
    if [[ $has_singularity != "True" ]]; then
        return 1
    fi

    output=$($singularity_path run --disable-cache $osghub_alpine /bin/true 2>&1)
    ret=$?

    if [[ $ret != 0 ]]; then
        # DEBUGGING
        info "Error testing for registry support; output:"
        info "$output"
        return $ret
    elif grep -q "temporary sandbox" <<< "$output"; then
        info "Using a registry created a temporary sandbox"
        return 1
    else
        return 0
    fi
}

info "Determining extra Singularity capabilities..."

if [ "$glidein_config" != "NONE" ]; then
    ###########################################################
    # import advertise and add_condor_vars_line functions
    if [ "x$add_config_line_source" = "x" ]; then
        export add_config_line_source=`grep '^ADD_CONFIG_LINE_SOURCE ' $glidein_config | awk '{print $2}'`
        export condor_vars_file=`grep -i "^CONDOR_VARS_FILE " $glidein_config | awk '{print $2}'`
    fi

    info "Sourcing $add_config_line_source"
    source $add_config_line_source
fi

# can the provided Singularity run .sif images?
if check_singularity_sif_support; then
    # make sure this goes false if we later figure out that
    # singularity is not working correctly
    advertise SINGULARITY_CAN_USE_SIF "HAS_SINGULARITY" "C"
else
    advertise SINGULARITY_CAN_USE_SIF "False" "C"
fi

# can the provided Singularity run registry images?
if check_singularity_registry_support; then
    # make sure this goes false if we later figure out that
    # singularity is not working correctly
    advertise SINGULARITY_CAN_USE_REGISTRY "HAS_SINGULARITY" "C"
else
    advertise SINGULARITY_CAN_USE_REGISTRY "False" "C"
fi



